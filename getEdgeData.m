function [edata,efeature,edgeStruct]=getEdgeData(edgeStruct,data,feature)
% Transforming node data to edge data according to the 
% selected edges
% edgeStruct: structured variable generated by function 
%             "node2edge"
% data: m by n matrix of node data, where m is the number
%       of node features, n is the number of samples
% feature: m by 1 cell array of strings, feature names
% edata: l by n matrix of edge data, where l is the number
%        of edge features, n is the number of samples
% efeature: l by 1 cell array of strings; edge feature names
%           taking the form 
%           "<name of node1>~<name of node2>~<class i>"
%           where name of node1 is prior to name of node2 
%           in lexicographic order
%
% Created by Wanwei Zhang (wanway@hotmail.com)

idx=zeros(size(edgeStruct.feature));
for i=1:numel(edgeStruct.feature)
    idx(i)=find(strcmp(edgeStruct.feature{i},feature));
end
edgeStruct.feature(idx==0)=[];
edgeStruct.mu(idx==0,:)=[];
edgeStruct.usd(idx==0,:)=[];

data=data(idx(idx~=0),:);
feature=feature(idx(idx~=0));
% all(strcmp(feature,edgeStruct.feature))
nf=size(data,1);
ns=size(data,2);
nc=size(edgeStruct.mu,2);
zdata=zeros(nc*nf,ns);
for i=1:nc
    zdata((1:nf)+(i-1)*nf,:)=(data-repmat(edgeStruct.mu(:,i),1,ns))./...
        repmat(edgeStruct.usd(:,i),1,ns);
end

edgeIdx=zeros(size(edgeStruct.edge(:,1:2)));
for i=1:numel(edgeIdx)
    edgeIdx(i)=find(strcmp(edgeStruct.edge{i},edgeStruct.feature));
end
idx=any(edgeIdx==0,2);
edgeStruct.edge(idx,:)=[];
edgeIdx(idx,:)=[];
idx=cell2mat(edgeStruct.edge(:,3));
edgeIdx=edgeIdx+repmat((idx-1)*nf,1,2);

edata=zdata(edgeIdx(:,1),:).*zdata(edgeIdx(:,2),:);

edge=edgeStruct.edge;
efeature=cell(size(edge,1),1);
for i=1:size(edge,1)
    edge(i,1:2)=sort(edge(i,1:2));
    efeature{i}=[edge{i,1},'~',edge{i,2},'~',num2str(edge{i,3})];
end

